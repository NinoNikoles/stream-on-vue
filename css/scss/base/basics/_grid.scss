html {
    font: {
        size: 100%;
    }

    scroll-behavior: smooth;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
}

body {
    width: 100%;
    min-width: 100px;
    min-height: 100px;
    overflow-x: hidden;
    @include transition(background-color $transition-default);
}

main .main {
    overflow: hidden;
}

#print {
    display:none;
}

#wrapper {
    display: block;
    width: 100%;
    min-height: 70vh;
    position: relative;
    clear: both;
}

#masterWrap {
    line: {
        height: 0;
    }
    position: relative;
    opacity: 1;
    overflow: hidden;
    z-index: 0;
}

.innerWrap {
    @include box-sizing(border-box);
    font: {
        size: 0;
    }
    line: {
        height: 0;
    }
    max-width: rem-calc($grid-max-width);
    width: 100%;
    padding: {
        right: rem-calc($grid-padding);
        left: rem-calc($grid-padding);
    }
    margin: {
        top: 0;
        right: auto;
        bottom: 0;
        left: auto;
    }
    position: relative;
    z-index: 0;

    > .innerWrap {
        padding: {
            right: 0;
            left: 0;
        }
    }
}

.row {
    margin: {
        right: rem-calc(-$grid-padding);
        left: rem-calc(-$grid-padding);
    }
    width: unset !important;
    min-width: 100%;
}

.column {
    padding: {
        right: rem-calc($grid-padding);
        left: rem-calc($grid-padding);
    }
}

.grid {
    @include box-sizing(border-box);
    display: inline-block;
    font: {
        size: 0;
    }
    position: relative;
    vertical-align: text-top;
}

@function gridWidth($n, $columns) {
    @return $n * 100% / $columns;
}

@for $i from 1 through $grid-columns {
    .col#{$i} {
        @extend .grid;
        width: 100%;
        min-width: 100%;

        @include MQ(medium) {
            width: gridWidth($i,$grid-columns);
            min-width: gridWidth($i,$grid-columns);
        }
    }

    .marg-left-col#{$i} { @include MQ(medium) { margin-left: gridWidth($i,$grid-columns); } }
    .marg-right-col#{$i} { @include MQ(medium) { margin-right: gridWidth($i,$grid-columns); } }
    .marg-horizontal-col#{$i} { @include MQ(medium) { margin-right: gridWidth($i,$grid-columns); margin-left: gridWidth($i,$grid-columns); } }

    .pad-left-col#{$i} { @include MQ(medium) { padding-left: gridWidth($i,$grid-columns); } }
    .pad-right-col#{$i} { @include MQ(medium) { padding-right: gridWidth($i,$grid-columns); } }
    .pad-horizontal-col#{$i} { @include MQ(medium) { padding-left: gridWidth($i,$grid-columns); padding-right: gridWidth($i,$grid-columns); } }

    .left-col#{$i} { @include MQ(medium) { left: gridWidth($i,$grid-columns); } }
    .right-col#{$i} { @include MQ(medium) { right: gridWidth($i,$grid-columns); } }
}

@for $i from 1 through $grid-columns {
    .col-count#{$i} {
        @include MQ(medium) {
            column: {
                count: $i;
                gap: rem-calc($grid-padding*2);
            } 
        }
    }
}

@each $key, $val in $breakpoints {
    @for $i from 1 through $grid-columns {
        .col-#{$i} {
            @extend .grid;
            width: gridWidth($i, $grid-columns);
            min-width: gridWidth($i, $grid-columns);
        }
    }
}

@each $key, $val in $breakpoints {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-#{$key} {
            @extend .grid;
            @include MQ($key) {
                width: gridWidth($i, $grid-columns);
                min-width: gridWidth($i, $grid-columns);
            }
        }
    }
}

.grid-row {
    @extend .row;
    margin: {
        right: rem-calc(-($grid-padding/2));
        left: rem-calc(-($grid-padding/2));
    }
}

.grid-padding {
    padding: {
        right: rem-calc($grid-padding / 2);
        left: rem-calc($grid-padding / 2);
    }
}

@each $step, $val in $space {
    // padding
    .pad-#{$step} { padding: rem-calc($val/2); @include MQ(medium) { padding: rem-calc($val); } }
    .pad-top-#{$step} { padding-top: rem-calc($val/2); @include MQ(medium) { padding-top: rem-calc($val); } }
    .pad-right-#{$step} { padding-right: rem-calc($val/2); @include MQ(medium) { padding-right: rem-calc($val); } }
    .pad-bottom-#{$step} { padding-bottom: rem-calc($val/2); @include MQ(medium) { padding-bottom: rem-calc($val); } }
    .pad-left-#{$step} { padding-left: rem-calc($val/2); @include MQ(medium) { padding-left: rem-calc($val); } }
    .pad-horizontal-#{$step} { padding: { right: rem-calc($val/2); left: rem-calc($val/2); } @include MQ(medium) { padding: { right: rem-calc($val); left: rem-calc($val); } } }
    .pad-vertical-#{$step} { padding: { top: rem-calc($val/2); bottom: rem-calc($val/2); } @include MQ(medium) { padding: { top: rem-calc($val); bottom: rem-calc($val); } } }
    //margin
    .marg-#{$step} { margin: rem-calc($val/2) !important; @include MQ(medium) { margin: rem-calc($val) !important; } }
    .marg-top-#{$step} { margin-top: rem-calc($val/2); @include MQ(medium) { margin-top: rem-calc($val); } }
    .marg-right-#{$step} { margin-right: rem-calc($val/2); @include MQ(medium) { margin-right: rem-calc($val); } }
    .marg-bottom-#{$step} { margin-bottom: rem-calc($val/2) !important; @include MQ(medium) { margin-bottom: rem-calc($val) !important; } }
    .marg-left-#{$step} { margin-left: rem-calc($val/2); @include MQ(medium) { margin-left: rem-calc($val); } }
    .marg-horizontal-#{$step} { margin: { right: rem-calc($val/2); left: rem-calc($val/2); } @include MQ(medium) { margin: { right: rem-calc($val); left: rem-calc($val); } } }
    .marg-vertical-#{$step} { margin: { top: rem-calc($val/2); bottom: rem-calc($val/2); } @include MQ(medium) { margin: { top: rem-calc($val); bottom: rem-calc($val); } } }
    // pull-margin
    .pull-#{$step} { margin: 0; @include MQ(medium) { margin: -#{$val}; } }
    .pull-top-#{$step} { margin-top: 0; @include MQ(medium) { margin-top: -#{$val}; } }
    .pull-right-#{$step} { margin-right: 0; @include MQ(medium) { margin-right: -#{$val}; } }
    .pull-bottom-#{$step} {margin-bottom: 0; @include MQ(medium) { margin-bottom: -#{$val}; } }
    .pull-left-#{$step} { margin-left: 0; @include MQ(medium) { margin-left: -#{$val}; } }
}

.pad {
    &-top-no { padding-top: 0 !important; }
    &-right-no { padding-right: 0 !important; }
    &-bottom-no { padding-bottom: 0 !important; }
    &-left-no { padding-left: 0 !important; }
}

.marg {
    &-top-no { margin-top: 0 !important; }
    &-right-no { margin-right: 0 !important; }
    &-bottom-no { margin-bottom: 0 !important; }
    &-left-no { margin-left: 0 !important; }
}